@require: list
@require: gr


  let cat = List.fold-left (+++) block-nil

  let item-indent = 16pt
  let item-gap = 10pt
  let item-gap-outer = 6pt

  let bullet color (x, y) =
    let center = (x +' 4pt, y +' 4pt) in
    let r = 2pt in
      [ fill color (Gr.circle center r); ]

  let-rec listing-item ctx depth (Item(parent, children)) =
    let color = get-text-color ctx in
    let ib-bullet = inline-graphics 8pt 8pt 0pt (bullet color) ++ inline-skip 8pt in
    let bullet-width = get-natural-width ib-bullet in
    let parent-indent = item-indent *' (float depth) in
    let ib-parent =
      embed-block-top ctx ((get-text-width ctx) -' parent-indent -' bullet-width) (fun ctx ->
        form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
          (read-inline ctx parent ++ inline-fil)
      )
    in
    let bb-parent =
      form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
        ((inline-skip parent-indent) ++ ib-bullet ++ ib-parent)
    in
    let bbs-children = List.map (listing-item ctx (depth + 1)) children in
      bb-parent +++ cat bbs-children


  let listing ctx (Item(_, itmzs)) =
    let bbs = List.map (listing-item ctx 0) itmzs in
      block-skip item-gap-outer +++ (cat bbs) +++ block-skip item-gap-outer


  let-block ctx +listing item =
    listing ctx item

  let-inline ctx \listing item =
    inline-fil ++ embed-block-breakable ctx (listing ctx item)
