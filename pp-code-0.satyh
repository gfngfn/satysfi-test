@stage: 0
@import: external/satysfi-lib/parser

type meta-code-element =
  | ObjectCode of string
  | MetaCode   of string

module MetaCode = struct

  let atmark = Char.make `@`

  let is-not-atmark ch = not (Char.equal ch atmark)

  let non-atmark-string-parser : string string parser =
    open Parser in
    many1 (satisfy is-not-atmark) >>= (fun chars -> return (String.of-list chars))

  let meta-parser : meta-code-element string parser =
    open Parser in
    let p1 =
      between
        (debug `open` (char atmark))
        (debug `close` (char atmark))
        non-atmark-string-parser >>= (fun s -> return (MetaCode(s)))
    in
    let p2 = string `@@` >> (return (ObjectCode(`@`))) in
    debug `meta-parser` (p1 <|> p2)

  let object-parser : meta-code-element string parser =
    open Parser in
    debug `object-parser` (
      non-atmark-string-parser >>= (fun s -> return (ObjectCode(s)))
    )

  let main-parser : (meta-code-element list) string parser =
    open Parser in
    debug `main-parser` (
      many (meta-parser <|> object-parser)
    )


  let parse : string -> meta-code-element list
    | s =
      match main-parser |> Parser.run s with
      | None             -> error `MetaCode: parse error`
      | Some((elems, _)) -> elems

end
